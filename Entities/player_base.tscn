[gd_scene load_steps=11 format=3 uid="uid://0eugh23rh82p"]

[ext_resource type="Texture2D" uid="uid://bi77d22yfwguh" path="res://2D Assets/crosshair.png" id="2_tqj0f"]

[sub_resource type="GDScript" id="GDScript_2qh8v"]
script/source = "extends CharacterBody3D


const MAX_SPEED = 4
const ACCELERATION = 0.3
const DECELLERATION = 0.2
const GRAVITY = 12
const JUMP_VELOCITY = 6
const JUMP_SLOWDOWN = 0.8
const SPEED_CUTOFF = 3

enum STATES {RUNNING, JUMPING, FALLING, STANDING, HOOKSHOTTING}

var mouse_sensitivity = 0.005
var direction_2D: Vector2 = Vector2(0, 0)
var state: STATES = STATES.RUNNING
var initial_jump_basis: Basis

@onready var neck := $Neck
@onready var camera := $Neck/CameraParent
@onready var coyote_time := $CoyoteTime
@onready var camera_shake := $Neck/CameraParent/CameraShake
@onready var camera_node := $Neck/CameraParent/Camera3D

func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	elif event.is_action_pressed(\"ui_cancel\"):
		Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	
	if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		if event is InputEventMouseMotion:
			neck.rotate_y(-event.relative.x * mouse_sensitivity)
			camera.rotate_x(-event.relative.y * mouse_sensitivity)
			camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-80), deg_to_rad(70))
			

func apply_vertical_movement(delta: float) -> void:
	if not is_on_floor() and coyote_time.is_stopped():
		velocity.y -= GRAVITY * delta
		if velocity.y < 0:
			state = STATES.FALLING
	
	# fall faster once we reach peak of jump
	if state == STATES.FALLING:
		velocity.y -= GRAVITY * delta / 2
	
	if state == STATES.JUMPING and initial_jump_basis == Basis.IDENTITY and (
		velocity.x > 0 or velocity.y > 0):
		initial_jump_basis = neck.transform.basis
	
	# Handle jump.
	if Input.is_action_just_pressed(\"jump\") and (
		is_on_floor() or not coyote_time.is_stopped()):
		velocity.y = JUMP_VELOCITY
		state = STATES.JUMPING
		if state == STATES.RUNNING:
			initial_jump_basis = neck.transform.basis
		coyote_time.stop()
	elif is_on_floor():
		state = STATES.RUNNING
		initial_jump_basis = Basis.IDENTITY
	

func apply_horizontal_movement(delta: float) -> void:
	# Get the input direction and handle the movement/deceleration.
	var input_dir: Vector2 = Input.get_vector(\"move_left\", 
		\"move_right\", \"move_forward\", \"move_down\")

	if state == STATES.STANDING and (input_dir.x != 0 or input_dir.y != 0):
		state = STATES.RUNNING
	
	
	# read inputs and factor in acceleration
	direction_2D.x = clamp(input_dir.x * ACCELERATION * delta + direction_2D.x,
		-1, 1)

	direction_2D.y = clamp(input_dir.y * ACCELERATION * delta + direction_2D.y,
		-1, 1)
	
	# convert inputs into normalized direction vector
	# keep relative direction if jumping
	var direction: Vector3 = (neck.transform.basis * Vector3(input_dir.x,
			0, input_dir.y)).normalized()
	
	if state in [STATES.JUMPING, STATES.FALLING]:
		direction += (initial_jump_basis * Vector3(input_dir.x,
			0, input_dir.y)).normalized()
		direction = direction / 2

		
			
	# allow for precision in non-forward directions
	if initial_jump_basis and initial_jump_basis != Basis.IDENTITY:
		if input_dir.y > 0:
			direction.z = direction.z * JUMP_SLOWDOWN
		direction.x = direction.x * JUMP_SLOWDOWN
		
	handle_inputs(direction)

func handle_inputs(direction: Vector3) -> void:
	if direction:
		velocity.x = clamp(direction.x * MAX_SPEED,
			-MAX_SPEED * abs(direction.x), 
			MAX_SPEED * abs(direction.x)
		)
		velocity.z = clamp(direction.z * MAX_SPEED,
			-MAX_SPEED * abs(direction.z), 
			MAX_SPEED * abs(direction.z)
		)
	else:
		velocity.x = move_toward(velocity.x, 0, DECELLERATION)
		velocity.z = move_toward(velocity.z, 0, DECELLERATION)

func animate():
	var speed: float = sqrt(velocity.x ** 2 + velocity.z ** 2)

	var need_animation: bool = len(camera_shake.get_queue()) == 0
	if state == STATES.RUNNING and speed < 2:
		if need_animation:
			camera_shake.queue(\"ShakeWeak\")
	elif state == STATES.RUNNING and speed > 3:
		if need_animation:
			camera_shake.queue(\"ShakeStrong\")
	else:
		camera_shake.play(\"RESET\")


func _physics_process(delta: float) -> void:

	apply_horizontal_movement(delta)
	
	apply_vertical_movement(delta)
	
	var was_on_floor: bool = is_on_floor()
	move_and_slide()
	if was_on_floor and not is_on_floor():
		coyote_time.start()
	
	if velocity.is_equal_approx(Vector3.ZERO):
		state = STATES.STANDING
		
	animate()
	

	
	
"

[sub_resource type="CylinderShape3D" id="CylinderShape3D_rgnmm"]
height = 0.623384
radius = 0.260249

[sub_resource type="CylinderMesh" id="CylinderMesh_oj3po"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_nib5q"]
shading_mode = 2
specular_mode = 1
albedo_color = Color(1, 0.803922, 1, 1)
heightmap_scale = 0.326

[sub_resource type="Animation" id="Animation_yqx80"]
resource_name = "JumpZoomout"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera3D:fov")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [85.0, 90.0]
}

[sub_resource type="Animation" id="Animation_xhjtx"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera3D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0.006)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera3D:fov")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [85.0]
}

[sub_resource type="Animation" id="Animation_p4j4e"]
resource_name = "ShakeStrong"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera3D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.15, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0.006), Vector3(0, -0.1, 0.006), Vector3(0, -0.1, 0.006), Vector3(0, 0, 0.006)]
}

[sub_resource type="Animation" id="Animation_pbt83"]
resource_name = "ShakeWeak"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera3D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0.006), Vector3(0, -0.1, 0.006), Vector3(0, -0.1, 0.006), Vector3(0, 0, 0.006)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_wm3e8"]
_data = {
"JumpZoomout": SubResource("Animation_yqx80"),
"RESET": SubResource("Animation_xhjtx"),
"ShakeStrong": SubResource("Animation_p4j4e"),
"ShakeWeak": SubResource("Animation_pbt83")
}

[node name="PlayerBase" type="CharacterBody3D"]
collision_mask = 15
script = SubResource("GDScript_2qh8v")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(0.9, 0, 0, 0, 0.9, 0, 0, 0, 0.9, 0, 0.108932, 0)
shape = SubResource("CylinderShape3D_rgnmm")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(0.5, 0, 0, 0, 0.283763, 0, 0, 0, 0.5, 0, 0.111117, 0)
layers = 2
mesh = SubResource("CylinderMesh_oj3po")
surface_material_override/0 = SubResource("StandardMaterial3D_nib5q")

[node name="Neck" type="Node3D" parent="."]

[node name="CameraParent" type="Node3D" parent="Neck"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.295, 0.006)

[node name="Camera3D" type="Camera3D" parent="Neck/CameraParent"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.006)
cull_mask = 1048573
fov = 85.0

[node name="Sprite3D" type="Sprite3D" parent="Neck/CameraParent/Camera3D"]
transform = Transform3D(0.005, 0, 0, 0, 0.005, 0, 0, 0, 0.005, 0, 0, -0.224562)
texture = ExtResource("2_tqj0f")

[node name="CameraShake" type="AnimationPlayer" parent="Neck/CameraParent"]
libraries = {
"": SubResource("AnimationLibrary_wm3e8")
}
blend_times = [&"RESET", &"ShakeStrong", 0.5, &"RESET", &"JumpZoomout", 0.1, &"RESET", &"ShakeWeak", 0.5, &"ShakeStrong", &"ShakeWeak", 1.0, &"JumpZoomout", &"RESET", 0.25, &"ShakeWeak", &"RESET", 1.0, &"ShakeWeak", &"ShakeStrong", 1.0]

[node name="CoyoteTime" type="Timer" parent="."]
wait_time = 0.25
one_shot = true
